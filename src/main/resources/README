## MAIN CODE REFERENCE

Maintain参考地址：http://cuisuqiang.iteye.com/blog/1489661

pool :http://shenjichao2009.iteye.com/blog/1175857

ProtocolDefineded:http://blog.csdn.net/ns_code/article/details/14229253

TCP:http://blog.csdn.net/u013290890/article/details/19766099

##1.概念

短连接：指建立SOCKET连接后发送后接收完数据后马上断开连接，比如http，只是连接、请求、关闭，过程时间较短,服务器若是一段时间内没有收到请求即可关闭连接。

长连接：指建立SOCKET长连接就指的是一直保持连接，不管当前是否发送或者接收数据。 如果双方都没有一方对这个链接做处理操作的话，那么这个链接保持链接状态，这是非常不安全的。

##2.使用时机

长连接：多用于操作频繁，点对点的通讯，而且必须是连接的数量不能太多的情况下。因为每个TCP连接的建立都需要三次握手，每个TCP连接的断开要四次握手。如果每次操作都要建立连接然后再操作的话处理速度会降低，所以每次操作后，下次操作时直接发送数据就可以了，不用再建立TCP连接。

短连接： web网站的http服务一般都用短连接。因为长连接对于服务器来说要耗费一定的资源。像web网站这么频繁的成千上万甚至上亿客户端的连接用短连接更省一些资源。试想如果都用长连接，而且同时用成千上万的用户，每个用户都占有一个连接的话，可想而知服务器的压力有多大。所以并发量大，但是每个用户又不需频繁操作的情况下需要短连接。


##3.为什么TCP会粘包 

  前几天，调试mina的TCP通信， 第一个协议包解析正常，第二个数据包不完整。为什么会这样吗，我们用mina这样通信框架，还会出现这种问题？ 带者问题，我们先分析一下问题。
  提到通信， 我们面临都通信协议，数据协议的选择。 通信协议我们可选择TCP/UDP：

    TCP（transport control protocol，传输控制协议）是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的socket，因此，发送端为了将多个发往接收端的包，更有效的发到对方，使用了优化方法（Nagle算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样，接收端，就难于分辨出来了，必须提供科学的拆包机制。 即面向流的通信是无消息保护边界的。

    UDP（user datagram protocol，用户数据报协议）是无连接的，面向消息的，提供高效率服务。不会使用块的合并优化算法，, 由于UDP支持的是一对多的模式，所以接收端的skbuff(套接字缓冲区）采用了链式结构来记录每一个到达的UDP包，在每个UDP包中就有了消息头（消息来源地址，端口等信息），这样，对于接收端来说，就容易进行区分处理了。 即面向消息的通信是有消息保护边界的。

由于TCP无消息保护边界, 需要在消息接收端处理消息边界问题。也就是为什么我们以前使用UDP没有此问题。 反而使用TCP后，出现少包的现象。

更多内容请阅读: http://blog.csdn.net/pi9nc/article/details/17165171